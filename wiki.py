import wikipedia
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from database import Database
import os


wikipedia.set_lang("ru")

db = Database()

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    exit(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç-–≤–∏–∫–∏–ø–µ–¥–∏—è.\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞</i>,\n"
        f"–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /wiki <–∑–∞–ø—Ä–æ—Å>",
        parse_mode="HTML"
    )

async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str):
    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    request_id = db.log_search(user.id, query)

    try:
        page = wikipedia.page(query, auto_suggest=False)
        summary = wikipedia.summary(query, auto_suggest=False)
        db.save_article(request_id, page.title, summary, page.url)

        # –ö–Ω–æ–ø–∫–∞ "–ß–∏—Ç–∞—Ç—å –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏"
        keyboard = [[InlineKeyboardButton("üîó –ß–∏—Ç–∞—Ç—å –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏", url=page.url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        image_url = page.images[0] if page.images else None
        if image_url and image_url.lower().endswith(('.jpg', '.jpeg', '.png', '.gif')):
            await update.message.reply_photo(
                photo=image_url,
                caption=f"üìö <b>{page.title}</b>\n\n{summary}",
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text=f"üìö <b>{page.title}</b>\n\n{summary}",
                parse_mode="HTML",
                reply_markup=reply_markup
            )

    except wikipedia.exceptions.DisambiguationError as e:
        await update.message.reply_text(
            f"üîé –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π. –£—Ç–æ—á–Ω–∏ –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: {', '.join(e.options[:5])}"
        )
    except wikipedia.exceptions.PageError:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def wiki_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        query = ' '.join(context.args)
        await handle_query(update, context, query)
    else:
        await update.message.reply_text("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wiki <—Ç–µ–º–∞>")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    await handle_query(update, context, query)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("wiki", wiki_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()