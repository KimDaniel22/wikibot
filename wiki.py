import re
import wikipedia
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from database import Database
import os
from config import TOKEN

wikipedia.set_lang("ru")

db = Database()
# db.init()

def extract_query(text: str) -> str:
    text = text.lower().strip()
    patterns = [
        r'^—á—Ç–æ —Ç–∞–∫–æ–µ\s+',
        r'^—á—Ç–æ —ç—Ç–æ\s+',
        r'^–æ–±—ä—è—Å–Ω–∏\s+—á—Ç–æ —Ç–∞–∫–æ–µ\s+',
        r'^—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ\s+',
        r'^–ø–æ—è—Å–Ω–∏\s+—á—Ç–æ —Ç–∞–∫–æ–µ\s+',
        r'^–∫—Ç–æ —Ç–∞–∫–æ–π\s+',
        r'^–∫—Ç–æ —Ç–∞–∫–∞—è\s+',
        r'^—á—Ç–æ –∑–Ω–∞—á–∏—Ç\s+',
        r'^\s*–ø–æ—è—Å–Ω–∏\s+',
        r'^\s*–æ–±—ä—è—Å–Ω–∏\s+',
    ]
    for pattern in patterns:
        text = re.sub(pattern, '', text)
    return text.strip()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç-–≤–∏–∫–∏–ø–µ–¥–∏—è. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /wiki <–∑–∞–ø—Ä–æ—Å>")

async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str):
    query = extract_query(query)

    user = update.effective_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    request_id = db.log_search(user.id, query)

    try:
        page = wikipedia.page(query)
        content = page.content.split('\n')[0]  # –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü
        url = page.url

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –ø–µ—Ä–≤–∞—è –∏–∑ —Å–ø–∏—Å–∫–∞ images, –∫–æ—Ç–æ—Ä–∞—è jpg/png –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–µ–ª–∫–∞—è
        img_url = None
        for img in page.images:
            if img.lower().endswith(('.jpg', '.jpeg', '.png')):
                img_url = img
                break

        response = f"üìö <b>{page.title}</b>\n\n{content}\n\n"

        keyboard = [
            [InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏", url=url)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if img_url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π
            await update.message.reply_photo(photo=img_url, caption=response, reply_markup=reply_markup, parse_mode="HTML")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
            await update.message.reply_text(response, reply_markup=reply_markup, parse_mode="HTML")

        db.save_article(request_id, page.title, content, url)

    except wikipedia.exceptions.DisambiguationError as e:
        await update.message.reply_text(
            f"üîé –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π. –£—Ç–æ—á–Ω–∏ –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: {', '.join(e.options[:5])}")
    except wikipedia.exceptions.PageError:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def wiki_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        query = ' '.join(context.args)
        await handle_query(update, context, query)
    else:
        await update.message.reply_text("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wiki <—Ç–µ–º–∞>")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    await handle_query(update, context, query)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("wiki", wiki_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()