from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import wikipedia
from database import get_connection


wikipedia.set_lang("ru")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–ª–æ–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /wiki <—Ç–µ–º–∞>, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏.")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞

def log_request(user_id, username, query, response):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO requests (user_id, username, query, response)
        VALUES (%s, %s, %s, %s)
    """, (user_id, username, query, response))
    conn.commit()
    cur.close()
    conn.close()

async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str):
    try:
        summary = wikipedia.summary(query, sentences=3)
        page = wikipedia.page(query)
        # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ç–µ–∫—Å—Ç (–º–∞–∫—Å 1000 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(summary) > 1000:
            summary = summary[:1000] + "..."

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é
        keyboard = [[InlineKeyboardButton("üìñ –ß–∏—Ç–∞—Ç—å –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏", url=page.url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(summary, reply_markup=reply_markup)
    except wikipedia.exceptions.DisambiguationError as e:
        await update.message.reply_text(f"üîé –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π. –£—Ç–æ—á–Ω–∏ –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: {', '.join(e.options[:5])}")
    except wikipedia.exceptions.PageError:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wiki
async def wiki_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        query = ' '.join(context.args)
        await handle_query(update, context, query)
    else:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wiki <—Ç–µ–º–∞>")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    await handle_query(update, context, query)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    TOKEN = "7585359871:AAGG9F2z0IsPdrw2OsFXn6RfKtGrXbRl-Zo"

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("wiki", wiki_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run_polling()

if __name__ == "__main__":
    main()






